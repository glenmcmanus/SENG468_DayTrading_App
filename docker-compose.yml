version: "3.9"

services:

  #load balancer
  load_balancer:
    image: load_balancer:latest
    build:
      context: ./nginx/
      dockerfile: Nginx.Dockerfile
    container_name: load_balancer
    #depends_on:
      #- fetch_server
      #- transaction_server
    ports:
      - 5100:5100
      - 5200
      - 5300
      - 5400
    networks:
      - backend
    deploy:
      restart_policy:
        condition: on-failure

  #fetch
  fetch_server:
    image: fetch_server:latest
    build:
      context: ./LegacyServer
      dockerfile: ./Dockerfile
    depends_on:
      - "router1"
    #deploy:
    #  replicas: 3
    env_file:
      - .env
      - ./LegacyServer/legacy.env
    ports:
      - ${FETCH_PORT}
    networks:
      - backend

  #transaction
  transaction_server:
    image: transaction_server:latest
    build:
      context: ./
      dockerfile: ./TransactionServer/Dockerfile
    depends_on:
      - "router1"
    #deploy:
    #  replicas: 3
    env_file:
      - .env
      - ./TransactionServer/transaction.env
    links:
      - router1
    ports:
      - ${TRANSACTION_PORT}
    networks:
      - backend

  #webserver
  web_server:
    image: webserver:latest
    build:
      context: ./webserver
      dockerfile: ./Dockerfile
    depends_on:
      - "router1"
      - "fetch_server"
      - "transaction_server"
    deploy:
      replicas: 3
    env_file:
      - .env
      - ./webserver/webserver.env
    links:
      - load_balancer
      - router1
      - transaction_server
      - fetch_server
    ports:
      - ${WEB_PORT}
    networks:
      - backend

  #mongo routers
  router1:
    image: mongo_router:latest
    build:
      context: ./Mongo/Router
      dockerfile: ./Dockerfile
    container_name: router1
    command: mongos --port 27017 --configdb config-srv/cfg_srv1:27017,cfg_srv2:27017,cfg_srv3:27017 --bind_ip_all
    depends_on:
      - "router2"
    environment:
      - PRIMARY=1
    ports:
      - ${M_ROUTER1_PORT}:27017
    networks:
      - backend
    restart: always

  router2:
    image: mongo_router:latest
    container_name: router2
    command: mongos --port 27017 --configdb config-srv/cfg_srv1:27017,cfg_srv2:27017,cfg_srv3:27017 --bind_ip_all
    depends_on:
      - "shard1a"
      - "shard2a"
      - "shard3a"
    environment:
      - PRIMARY=0
    ports:
      - ${M_ROUTER2_PORT}:27017
    networks:
      - backend
    restart: always

  #mongo Config Servers
  cfg_srv1:
    image: mongo_cfg:latest
    build:
      context: ./Mongo/Config
      dockerfile: ./Dockerfile
    container_name: cfg_srv1
    command: mongod --port 27017 --configsvr --replSet config-srv
    depends_on:
      - "cfg_srv2"
      - "cfg_srv3"
    environment:
      - PRIMARY=1
    ports:
      - 27119:27017
    networks:
      - backend
    restart: always

  cfg_srv2:
    image: mongo_cfg:latest
    container_name: cfg_srv2
    command: mongod --port 27017 --configsvr --replSet config-srv
    environment:
      - PRIMARY=0
    ports:
      - 27120:27017
    networks:
      - backend
    restart: always

  cfg_srv3:
    image: mongo_cfg:latest
    build:
      context: ./Mongo/Config
      dockerfile: ./Dockerfile
    container_name: cfg_srv3
    command: mongod --port 27017 --configsvr --replSet config-srv
    environment:
      - PRIMARY=0
    ports:
      - 27121:27017
    networks:
      - backend
    restart: always

  #mongo Shards

  #Shard1
  shard1a:
    image: mongo_shard:latest
    build:
      context: ./Mongo/Shard
      dockerfile: ./Dockerfile
    container_name: shard1a
    command: mongod --port 27017 --shardsvr --replSet shard1
    depends_on:
      - "cfg_srv1"
      - "shard1b"
      - "shard1c"
    environment:
      - SHARD=shard1
      - PRIMARY=1
    ports:
      - 27122:27017
    networks:
      - backend
    restart: always

  shard1b:
    image: mongo_shard:latest
    container_name: shard1b
    command: mongod --port 27017 --shardsvr --replSet shard1
    depends_on:
      - "cfg_srv1"
    environment:
      - SHARD=shard1
      - PRIMARY=0
    ports:
      - 27123:27017
    networks:
      - backend
    restart: always

  shard1c:
    image: mongo_shard:latest
    container_name: shard1c
    command: mongod --port 27017 --shardsvr --replSet shard1
    depends_on:
      - "cfg_srv1"
    environment:
      - SHARD=shard1
      - PRIMARY=0
    ports:
      - 27124:27017
    networks:
      - backend
    restart: always

  #Shard2
  shard2a:
    image: mongo_shard:latest
    container_name: shard2a
    command: mongod --port 27017 --shardsvr --replSet shard2
    depends_on:
      - "cfg_srv1"
      - "shard2b"
      - "shard2c"
    environment:
      - SHARD=shard2
      - PRIMARY=1
    ports:
      - 27125:27017
    networks:
      - backend
    restart: always

  shard2b:
    image: mongo_shard:latest
    container_name: shard2b
    command: mongod --port 27017 --shardsvr --replSet shard2
    depends_on:
      - "cfg_srv1"
    environment:
      - SHARD=shard2
      - PRIMARY=0
    ports:
      - 27126:27017
    networks:
      - backend
    restart: always

  shard2c:
    image: mongo_shard:latest
    container_name: shard2c
    command: mongod --port 27017 --shardsvr --replSet shard2
    depends_on:
      - "cfg_srv1"
    environment:
      - SHARD=shard2
      - PRIMARY=0
    ports:
      - 27127:27017
    networks:
      - backend
    restart: always

  #Shard3
  shard3a:
    image: mongo_shard:latest
    container_name: shard3a
    command: mongod --port 27017 --shardsvr --replSet shard3
    depends_on:
      - "cfg_srv1"
      - "shard3b"
      - "shard3c"
    environment:
      - SHARD=shard3
      - PRIMARY=1
    ports:
      - 27128:27017
    networks:
      - backend
    restart: always

  shard3b:
    image: mongo_shard:latest
    container_name: shard3b
    command: mongod --port 27017 --shardsvr --replSet shard3
    depends_on:
      - "cfg_srv1"
    environment:
      - SHARD=shard3
      - PRIMARY=0
    ports:
      - 27129:27017
    networks:
      - backend
    restart: always

  shard3c:
    image: mongo_shard:latest
    container_name: shard3c
    command: mongod --port 27017 --shardsvr --replSet shard3
    depends_on:
      - "cfg_srv1"
    environment:
      - SHARD=shard3
      - PRIMARY=0
    ports:
      - 27130:27017
    networks:
      - backend
    restart: always

networks:
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: ${SUBNET}
          gateway: ${GATEWAY}